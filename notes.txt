											   INTRO
Modele OSI : debut en 1984
Modele theorique car le vrai utilise est le tcp/ip.
Norme preconisant la maniere de communiquer entre ordinateurs
7 couches :
1 - Couche physique : support de transmission. Materiel : HUB/concentrateur
2 - Couche liaison : connecter machines entres elles sur reseau local. Materiel : switch/commutateur.Addresse MAC et protocole Ethernet
3 - Couche reseau : interconnecter les reseaux entre eux. Materiel : routeur. (Addresse IP est de la couche 3).
4 - Couche transport : gerer les connexions applicatives. Materiel : RAS
5 - 6 : osef
7 - Couche application. Materiel : proxy (exemple appli : le navigateur)

Couches 1-4 : couches reseau.

Regles d'or OSI :

Chaque couche est independante, ie les informations utilisees par une couche ne peuvent pas etre utilisees par une autre couche.
Cela garantit l'interchangeabilite des couches, cad remplacement d'une sans devoir refaire toutes les autres.

Chaque couche ne peut communiquer qu'avec une couche adjacente.
Donc on est sur que toutes les couches sont traversees lors d'une requette (7 vers 1). En realite, le chemin est 7-4-3-2-1.

											LA COUCHE 1
Sert a acheminer des signaux electriques (0 et 1). cable ethernet ou wifi sont de la couche 1.
Cable coax : 10B2 pour 10 Mbps, B pour base et 2 pour 200m longueur max reseau.
Paire torsadee : 4 paires, mais 2 utilisees en pratique : 1 pour l'envoi, 1 pour la reception.
100BTx pour 100 Mbps, torsadee et x pour commute.
Pour connecter 2 machines directement entre elles, il faut un cable croise (si de meme type, cad 2 hub/switch ou 2 materiels connectes)
Le hub distribue l'info a toutes les machines relies, c'est donc un materiel archaique et non adatpe a un reseau securise

Fibre monomode pour les liaison longues, multi pour les liaisons courtes.

Topologie reseau: maniere de brancher les machines entre elles
En bus/ligne, en boucle, ou en etoile

Bus : une seule machine parle a la fois
Boucle, anneau : idem bus, mais avec un jeton de com
Etoile : Point central fait l'aiguillage

CSMA/CD : Carrier Sens Multiple Access/Collision Detection -> pour les bus
1.Ecouter en permanence si quelqu'un parle
2.Parler si le bus est libre
3.Si collision, on se tait pendant un temps aleatoire
4.On reparle

											LA COUCHE 2
Permettre a des machines connectees ensemble de communiquer.
Detecter les erreurs de transmission

Identifiant couche 2 : addresse MAC
L'addresse MAC est l'addresse d'une carte reseau.
Codee sur 6 octets, et generallement inscrite en hexa
3 premiers octets sont le code du constructeur 00:01:02 par ex.
Astuce ordre de grandeur nombre : 2^10 vaut environ 1000 donc 2^48 vaut 1000^4 * 2^8 donc 256 mille milliards

Addresse broadcast pour parler a tout le monde : ff:ff:ff:ff:ff:ff

Protocole couche 2 : Ethernet
Definit le format des messages envoyes sur le reseau (trame = message envoye sur le reseau en couche 2)

CRC : (cyclic redundancy check) code de correction des erreurs
Trame : MAC DST - MAC SRC - Protocole couche 3 - Donnees - CRC
En tete Eternet = 18 octets = 6 + 6 + 2 + 4 (MAC + MAC + PROTOCOLE + CRC)
Trame min/max : 64 - 1518 octets

Materiel de couche 2 : le switch/commutateur
bridge/pont : switch avec uniquement 2 ports

Table CAM : Content Addressable Memory. Table qui fait l'association entre un port du switch et l'addresse MAC associee
Permet au switch d'envoyer la trame a la bonne machine
Le switch aiguille les trames grace au MAC DST
La table CAM est mise a jour dynamiquement quand le switch voie passer une trame.
Si pas addresse de DST, le switch va envoyer le message a tout le monde, mais pas en broadcast (l'addresse de destination sera la vraie, pas l'addresse speciale broadcast pour dire a tout le monde de recuperer le message : ff:ff...)
TTL : time to live. Temps de retention d'une info de correspondance dans la table CAM

Le switch est un element passif, il ne doit normalement pas decouvrir les addresses MAC des elements.
Le switch n'a pas d'addresse MAC, sauf les administrables sur lequels on va se connecter.

Attaques par envoi de message vers des mac inexistantes (switch va envoyer a tout le monde)
Attaques par saturation de CAM en utilisant a chaque fois une addresee mac differente. Une fois la CAM
saturee, le switch va envoyer les infos a tout le monde

Plus de collisions dans un switch par rapport a hub, donc plus besoin de CSMA/CD
Les trames sont stockees dans la memoire du switch si besoin d'attendre.
C'est le full duplex, avant, c'etait half duplex sur hub.
Il ne faut surtout pas melanger les 2, mais les cartes reseau sont capables de detecter sur quoi
elles sont branchees et de choisir le bon mode en consequence
Si hub connecte a un switch, le port associe sera en fonctionnement half duplex.
A ce moment, la machine devra cesser toute com quand on lui parlera. Elle sera tres penalisee.

VLAN: option/capacitee d'un switch
Permet de faire plusieurs sous-reseaux

Attention : Broadcast storm si on fait une boucle sur un meme switch.
NE JAMAIS FAIRE DE BOUCLES SUR OU ENTRE DES SWITCH

La commutation implique que le switch a une memoire pour stoker les trames. Il les envoie ensuite au fur et a mesure.
											LA COUCHE 3
Protocole : IP
role : interconnecter et communiquer entre reseaux
Identifiant : l'addresse IP et masque de sous-reseau
C'est l'addresse du reseau ET de la machine : Une partie pour le reseau et une autre pour la machine
Codee sur 4 octets et ecriture en decimal pointee

Le masque est inseparable de l'addresse IP !!! Il indique quelle est la partie addresse reseau et quelle est la partie machine.
Les bits a 1 sont la partie reseau
Les 1 doivent etre a gauche, et les 0 a droite : continuite de bits.

Les valeurs ok pour un octet de masque :

0000 0000 -> 0
1000 0000 -> 128
1100 0000 -> 192
1110 0000 -> 224
1111 0000 -> 240 -> 2^4 = 16 adresses dispo
1111 1000 -> 248
1111 1100 -> 252
1111 1110 -> 254
1111 1111 -> 255

Plage d'adresses : l'ensemble des adresses definies par un masque et une addresse.
Les machines qui appartiennent au meme reseau ont leur bits de reseau identique.

La premiere adresse de la plage -> tous les bits de partie machine sont a 0. Adresse du reseau. Elle est toujours paire
La derniere adresse de la plage -> tous les bits de partie machine sont a 1. Adresse de broadcast. Elle est toujous impaire
Le nombre de machines disponibles sur un reseau est directement dependant du masque : 2^(nb de 0 dans masque ecrit en binaire).
L'adresse de reseau et de broadcast sont toujours non utilisables par les machines du reseau.
RMQ : en general, sur une plage d'addresses :
La premiere dispo est pour le routeur ou la derniere : 254 par ex

RFC 1918 : Les plages d'addresse et les reseaux particuliers
Les plages definies utilisables pour les reseaux internes sont :

10.0.0.0/255.0.0.0
172.16.0.0/255.240.0.0
192.168.0.0/255.255.0.0

On peut etre plus restrictif sur le masque.

Decoupage plages adresses :

Ecriture CIDR : 255.255.255.0 -> /24 pour 24 bits a 1 sur les 32 dispo.
Ecriture CIDR : 255.255.240.0 -> /20 pour 20 bits a 1 sur les 32 dispo.

1.Faire un decoupage facile de reseau quand on a le choix de toutes les adresses
Evaluer le nombre de machines et donc le nombre de 0 a utiliser dans le masque
1000 machines < 2^10 donc 10 bits a 0 dans le masque
Donc le masque 255.255.252.0 est ok
On commence a 10.0.0.0 -> la derniere adresse sera 10.0.3.255
Le debut de l'addresse du groupe suivant sera 10.0.4.0
On recommence avec les groupes suivants
Toujours creer les groupes du plus grand au plus petit !

2. Calcul d'une plage d'origine a partir d'une addresse et d'un masque :
10.45.185.24/255.255.248.0
Masque avec un libertee de 256 - 248 = 8
Les plages de debut seront donc 0,8,16...160,168,176,184,192...
Notre debut est donc a 184, la fin a 191
La plage est 10.45.184.0 - 10.45.191.255

3. Toujours prendre une plage qui a uniquement des 0 pour les bits d'addresse
(Dans le cas ou on ne decoupe pas du plus grand au plus petit)
Aller a la prochaine addresse qui a uniquement des zero pour le masque du groupe qu'on veut faire.
Ex : 255.255.255.0 avec un debut a 10.0.0.32 pour le debut dispo-> On va aller a 10.0.1.0

exo :
Plage 10.47.192.0/255.255.240.0
880 tech < 1024 = 2^10 -> 255.255.252.0
400 comm < 512 = 2^9 -> 255.255.254.0
60 dir < 64 = 2^6 -> 255.255.255.192 -> 255.255.255.128 pour secu

Plage tech : Plage largeur 4 -> 10.47.192.0 - 10.47.195.255
Plage com : Plage largeur 2 -> 10.47.196.0 - 10.47.197.255
Plage dir : Plage largeur nan -> 10.47.198.0 - 10.47.198.127

Plage dir : 10.47.192.0 - 10.47.192.127
Plage com : Plage largeur 2 -> 10.47.194.0 - 10.47.195.255
Plage tech : Plage largeur 4 -> 10.47.196.0 - 10.47.199.255

Le routage :

Protocole de la couche 3 : IP

Si une machine est sur le meme reseau, on communique grace a la couche 2, sinon grace a la couche 3
Comme pour la couche 2, il y a un format de message, le datagramme ou paquet :


??? - IP SRC - IP DST - DATA

trame ethernet :
Trame : MAC DST - MAC SRC - Protocole couche 3 - Donnees - CRC
En fait :
Trame : MAC DST - MAC SRC - Protocole couche 3 - (En tete couche 3 - En tete couche 4 - Donnees - CRC

On met l'IP de destination avant la source, parce que si on a recu le paquet, il a traverse les couches dans le sens 1->7 pour nous arriver, donc on sait deja que le message est pour nous.
En revanche, pour la trame ethernet, la mettre dans ce sens permet de jeter les trames qui ne nous sont pas destinees plus rapidement

Routeur : Materiel de couche 3 qui relie plusieurs reseaux
Il doit donc avoir une interface dans chacun des reseaux auxquels il est connecte
Il a plusieurs cartes reseau. Il va relayer les paquets qui ne sont pas pour lui.
Une simple machine non routeur va juste les jeter.

Une addresse MAC est propre a un reseau local, on ne la voit pas en dehors
Si IP pas sur notre reseau, l'adresse MAC de la source est celle du dernier routeur

Si en remontant de la couche 2 vers 3 on se rend compte que le message est pour notre adresse MAC, mais pas pour notre adresse IP, on doit la router vers quelqu'un d'autre, via la table de routage (si on est un routeur)

table de routage :
Liste les routeurs a qui je peux envoyer mon datagramme pour joindre une destination donnee. Ce sont des passerelles

route par defaut :
Route si l'adresse que je veux joindre n'appartient a aucun des reseaux de ma table
L'adresse du routeur qui nous "rapproche d'internet"
On la note defaut, ou 0.0.0.0

ecrire table de routage :
1. lister les reseaux auxquels le routeur est connecte
2. indiquer route par defaut
3. indiquer les autres reseau que je ne peux pas joindre avec les 1. et 2.
4. Renseigner les passerelles : La passerelle pour joindre un de mes reseaux est mon adresse
(La passerelle fait partie du reseau)

Chaque machine a egalement une table de routage (meme si ce n'est pas un routeur)
Permet de savoir a qui envoyer un paquet quand autre reseau que le sien
Pour joindre un reseau, une machine doit utiliser une passerelle qui appartient a son propre reseau
UNE PASSERELLE INDIQUEE DANS UNE TABLE DE ROUTAGE APPARTIENT TOUJOURS A L'UN DE MES RESAUX
On saura joindre tous les reseaux qui seront derriere la passerelle par defaut

route -n sous linux ou netstat -nr macos

TP Pratique :

On peut joindre une machine uniquement si le routage fonctionne dans les 2 sens !!!

Autres protocoles pour la couche 3 :

ARP : Address Resolution Protocol
Pour connaitres les addresses MAC des paserelles qui sont sur notre reseau !
ARP est un protocol pour associer une adresse MAC de couche 2 a une adresse IP de couche 3.
Il y a donc une table ARP egalement pour chaque machine afin de ne pas faire une requette ARP (ou broadcast ARP) a chaque fois.
Elle est sauvegarde pendant un temps court (2-3 minutes)
Il appartient a la fois a la couche 2 et la couche 3

arp -an pour afficher la table sous macos/linux
Possibilite de faire de l'ARP cache poisonning en donnant son adresse MAC pirate lors d'une requette ARP. Il suffit juste d'etre la derniere reponse emise pour etre celle prise en compte.

Protocole ICMP : Protocole couche 3
Protocole de gestion des erreurs de transmission -> Internet Control Message Protocol
Il vient en complement du protocole IP

2 infos dans l'entete : type et code
Le code donne des pricions sur le type d'erreur
TTL dans l'entete IP: time to live. De base a 64 sur Linux. A chaque passage par un routeur, il va enlever 1 au TTL. A 0, le paquet est jete et le message ICMP "TTL exceeded" est lance.

Le ping est une combinaison de 2 message ICMP : echo request (8) et echo reply (0)
traceroute va envoyer des message avec des TTL de 1, puis 2 etc... pour que chacun des routeurs renvoie un TTL-exceeded. Par incrementation, on va savoir par quels routeurs on est passe pour le chemin complet.


											LA COUCHE 4

Service : programme qui est en ecoute sur une machine
Role couche 4 : faire dialoguer ensemble de applications

L'identifiant de la couche 4 est le port : c'est l'adresse d'une application sur une machine
Le port est code sur 2 octets soit 65000 valeurs

Les ports des applications clientes sont donnees aleatoirement, au dessus de 1024.
Les ports en dessous de 1024 sont reserves pour les services standards (mail, ssh, ftp...)

netstat -antp pour voir la liste des ports ouverts.

2 protocoles differents : TCP et UDP
TCP : fiable, mais moins rapide -> pas de perte de paquets acceptable : mail, ssh, jeux, web
UDP : rapide, mais moins fiable - > pert de paquets ok : streaming, radio, tv, (et aussi DNS, SNMP)

TCP : chaque paquet doit etre aquitte par le receveur. Protocole dit connecte
UDP : paquets envoyes des que possible. Protocole non connecte

Datagramme UDP :
Port source - Port destination - Longueur totale - checksum - DATA
2 octets chacun pour l'entete - 8 octets au total
Taille en octets codee sur 2 octets, mais en general datagramme UDP de taille 512 octets max.

Il y a un CRC meme si la couche 4 est encapsulee dans la couche 2 (qui fait un CRC) car les couches sont censees etre independante. Il peut egalement y avoir des problemes dans les encapsulations

Protocole TCP :
Les 3 premiers paquets ne servent qu'a etablir la communication
Il y aura dans infos dans l'en-tete pour differencier les paquets de connexion des paquets normaux
Via des flags (0 ou 1)

1.Client -> serveur : Flag SYN pour synchro
2.Serveur -> client : Flag ACK et SYN (car 2 connexions necessaires)
3.Client -> serveur : flag ACK

C'est la Three Way Handshake

Par la suite, le flag ACK sera envoye dans tous les paquets pour signifier qu'on a recu le paquet precedent

Pour finir la connexion :

Demande de fermeture client : ACK et FIN
Demande de fermeture serveur : ACK et FIN
Aknowledge du client : ACK

Segment TCP :
Port Source - Port Dest - ??? - Flags - ??? - checksum - ??? - Data
20 octets

Flag RST : Pour signaler une anomalie, ou qu'un port est ferme (pas en ecoute) lors d'une requette SYN
Flag PSH et URG : pour signaler la priorite des paquets.

Wireshark pour sniffer les paquets reseau et pouvoir comprendre ce qui se passe en cas de probleme.

NAT et Port Forwarding : network address translation
Solutionne le probleme de reponse quand une machine envoie un message sur le net : L'IP de DST est ok pour la requette, mais pour la reponse, l'IP sera de la plage des adresses reserves, et donc le routeur ne saura pas comment sortir du reseau local
On aura jamais de reponse a des requetes envoyees dsur internet quand on utilise des adresses privees

NAT dynamique : associe n adresses privees a une addresse publique -> economie d'adresses
NAT statique : associe une adresse publique pour chaque adresse privee

La NAT va remplacer l'addresse privee de la machine par son addresse (publique) afin de pouvoir recevoir la reponse.
Grace a la table NAT, on pourra retrouve le destinataire dans le sens internet->machine du reseau privee avec les 4 infos suivantes :
IP SRC - IP DST - PORT SRC - PORT DST

Le routeur va egalement transformer le port de source par un port choisit par lui meme afin de se premunir contre un cas ou 2 Machines du reseau local utiliserait les meme infos (meme site, meme port de DST, meme port de source etc...)
Il va egalement noter cette info dans la table NAT
La limite d'addresse privees est donc theoriquement du nombre de ports, soit 65000 machines qui ont 1 connexion ouverte
En pratique dans une entreprise, on aura plusieures adresses publiques.

TCP et UDP ok via la NAT, car utilisent des ports.
On a solutionne le probleme de la reponse a une requete venant de notre reseau.
ARP n'a pas besoin de NAT car c'est un protocole utilise en local et base sur le broadcast

Comment faire pour etre joint depuis l'exterieur ? -> Port Forwarding
On redirige un port de notre routeur vers un port donne sur une machine locale
Gain en securite, car on ne redirige que les demandes inscrites sur la table de port forwarding.
Les autres demandes ne peuvent pas acceder aux machines locales.
En revanche, il n'y a qu'un port 80 dispo par exemple, donc potentiellement un seul serveur WEB parmitoutes les machines locales

Proxy : relais applicatif. Application de la couche 7 qui recoit des requetes et les transmet a une machine destination comme si c'etait elle qui faisait les requetes.

Exemple d'une requette complete :

Pile TPC/IP : implementatin du modele OSI au sein de l'OS. Programme qui fabrique les en-tetes.
HTTP : protocole applicatif pour envoyer des requetes WEB. Fonctionne viale protocole de couche 4 TCP
Qui peut le plus peut le moins : un equipement de couche 3 saura interpreter tous les protocoles des couches inferieures.
Le routeur qui fait la NAT change des infos de la couche 4 (le port) et de la couche 3 (l'IP)

RMQ IMPORTANTE : A chaque passage par un equipement, on remonte le modele OSI jusqu'au niveau de l'equipement (2 pour un switch, 3 pour un routeur, 4 pour un routeur qui NAT, 7 sur une machine etc...)

RMQ :
Quand on passe d'un reseau a un autre les adresse MAC changent dans l'en-tete
Quand on passe d'un reseau a un autre rien ne change dans les en tetes de couche 3 et 4 (IP et TCP) sauf si NAT
Si NAT, on change les IP source et port source

DHCP :

Serveur qui fournit des adresse IP a une machine au lieu de le faire manuellement. Permet de se connecter sans
connaitre au prealable la passerelle, ni les infos pour se connecter sur le bon reseau.
Il va donc ecouter sur un port (par defaut le 67 en UDP)

On va envoyer des trames Ethernet (on a pas d'adresse IP pour l'instant) via le MAC de broadcast.
La trame s'appelle DCHPDISCOVER et elle est envoyee a ff:ff:ff:ff:ff:ff
Le serveur DCHCP doit se retrouver sur le meme reseau que la machine
On aura les echanges suivants :

DCHPDISCOVER : client->serveur
DCHPOFFER : server->client
DCHPREQUEST : client->serveur
DCHPACK : server->client

On aura dans le DHCP offer : une proposition d'IP, un masque, une passerelle par defaut et un serveur DNS (Les 2 derniers sont facultatifs)

On a ainsi un bail pour une duree limitee. Au renouvellement, on essaiera directement de faire un DHCPREQUEST pour essayer de garder la meme adresse IP.

On peut ecouter les trames avec tcpdump :
tcpdump -i eth0

DNS (Domain Name System): Resolution de nom de site web en adresse IP.
Extension : en premier en partant de la droite -> Top Level Domain.
Il existe des TDL nationaux (fr, it, de etc...) et generiques (com, org etc...)

Chaque partie est un label, et l'ensemble constitue un FQDN : Fully Qualified Domain Name
Par convention, en FQDN se termine par un point normalement : www.google.com.
Cela permet d'etre sur qu'il n'y a pas de domaine au dessus !
Il y a en fait la racine du DNS

Dans l'architecture DNS, chaque label est responsable du niveau directement en dessous (a gauche donc)
On peut acheter le fait de gerer un nom de domaine

La resolution :
On demande au serveur DNS l'IP correspondant a un site type www.google.com
Le serveur DNS de notre nom de domaine ne connait pas l'info, car chaque serveur DNS est responsable d'un domaine ou d'un petit nombre de domaines
Il demande a la racine qui le renvoie vers le serveur DNS de com.
Le serveur DNS de com. le revoie vers google.com.
Le serveur DNS de google.com. donne finalement l'IP de www.google.com.

Faire autorite : Si resolution d'un nom de domaine par un serveur sans avoir besoin de demander l'info a quelqu'un d'autre.

ICANN organisme americain qui gere les 13 serveurs DNS racine. Ces 13 serveurs ont les IP des serveurs DNS qui gerent les TLD

Serveur de nom de domaine le plus repandu : BIND9

On declare et on configure des zones
Toujours 1 serveur principal DNS et un serveur secondaire (slave)
Toujours 2 adresses de messagerie

Type d'enregistrement :

A		: nom d'hote -> IPV4
CNAME	: alias pointant sur un autre nom d'hote
NS		: definir un serveur DNS du domaine
MX		: definir un serveur MAIL du domaine
PTR		: IPV4 -> nom d'hote. Pour les zones inverses uniquement
SOA		: infos de zone et duree diverses

Il y a des valeurs de poids pour la priorite (plus faible est prioritaire). A tour de role sinon
Attention a bien penser que si on ne termine pas un nom par un ., on sous-entend que le FQDN sera rajoute a la fin (ns2 deviendra ns2.reseau.fr. par exemple)

Commande host ou dig pour faire des interrogations DNS (sur 8.8.8.8 par exemple, un serveur DNS public propose par Google)

ex : host -t a www.leboncoin.fr 8.8.8.8 pour avoir IP de leboncoin

Protocole HTTP :
A pour role de transporter des pages web composees de balises HTML

Les serveurs les plus utilise sont Apache et Nginx
